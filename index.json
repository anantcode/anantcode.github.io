[{"content":"Replace mock data with a real datasource:\nSend HTTP request once the page has loaded - we would typically use useEffect() Runs whenever component is frist rendered, never after. Do: fetch your data inside it.\nManage state for the component - use useState() hook\nconst [loadedNotes, setLoadedNotes] = useState([]);  useEffect(()=\u0026gt; {  //send http request and fetch data.  //set on component  setLoadedNotes(LOADED_NOTES); }, []); Full code (with function component):\nfunction HomePage(){  const [loadedNotes, setLoadedNotes] = useState([]);   useEffect(()=\u0026gt; {  //send http request and fetch data.  //set on component  setLoadedNotes(LOADED_NOTES);  }, []);   return \u0026lt;NoteList notes={LOADED_NOTES} /\u0026gt; }  export default HomePage; useEffect() works like - whatever fn you pass into it - it executes that fn AFTER the function component is executed.\nThis means:\n First time the HomePage function component is executed, LOADED_NOTES will be an empty array. Then this useEffect will execute- update the state, due to which the component function will execute again (because state changed), and will render again. Therefore 2 render cycles.  Why emphasing on the 2 render cycle?\nBecause UX affected because (rerender/flickering) - and SEO affected - in the first render, data is not there! - because it is rendered in the second component execution cycle.\nthe prerendered HTML page (generated by nextjs automatically) does not wait for the second cycle - it always takes the result of the first render cycle and returns that as the pre rendered HTML code.\nThankfully nextjs has solution to this: Page Pre-rendering\nPage pre rendering Can use getStaticProps\n reserved name only works in pages/ (components under pages) This executes before the component function is run is allowed to be async. (ie you ca return promise) (nextjs will wait for the promise to get resolved) You can use getSP to run code that woukd usualyy run on a server - like ccess file sytem, connect to a DB. Any code you write in here will never end up in client side, never execute on client side.  simply because this code is executed during the build process, not on the server and especially not on the clients of your visitors.\nSo the code in here will never reach the machines of your visitors.\nIt will never execute on their machines.\nNow, here in getStaticProps, you can do whatever you want, for example, fetch data from an API or from a database or read data from some files in the file system.\nBut then once you\u0026rsquo;re done with whatever you did to get the data you need, you need to return an object here in getStaticProps.\nYou always need to return an object from gsp.\nNow, in this object, you can configure various things but most importantly, you typically set a props property here and it has to be named props.\nWhat props holds will be the props object you receive in your component function (HomePage(props)).\nThe structure of this props object is totally up to you, (we could have our notes key in there.) which holds our DUMMY_NOTES.\nexport async function getStaticProps(){  //fetch data from an API  return {  props: {  notes: DUMMY_NOTES  }  } }  Therefore in our HomePage() we no longer need to manage state! We no longer need useEffect! - because we now get the data from props (thanks to gsp)\n Final:\nfunction HomePage(props){  // const [loadedNotes, setLoadedNotes] = useState([]);   // useEffect(()=\u0026gt; {  // //send http request and fetch data.  // //set on component  // setLoadedNotes(LOADED_NOTES);  // }, []);   return \u0026lt;NoteList notes={props.notes} /\u0026gt; }  export async function getStaticProps(){  //fetch data from an API  return {  props: {  notes: DUMMY_NOTES  }  } }  export default HomePage; We moved the data-fetching away from client (moved it to during the build process)\n","permalink":"https://anantcode.github.io/posts/2022-05-09-day3-100doc/","summary":"Replace mock data with a real datasource:\nSend HTTP request once the page has loaded - we would typically use useEffect() Runs whenever component is frist rendered, never after. Do: fetch your data inside it.\nManage state for the component - use useState() hook\nconst [loadedNotes, setLoadedNotes] = useState([]);  useEffect(()=\u0026gt; {  //send http request and fetch data.  //set on component  setLoadedNotes(LOADED_NOTES); }, []); Full code (with function component):","title":"Day3 #100DaysOfCode"},{"content":"Day 2 Key Learnings:\n pages folder name is reserved in nextjs.  Others like components is not reserved.   How props are passed to a component. Utilize _app.js for anything that affects all pages like Layout - wrap with Layout component, Navigation (with links) etc Using Programmatic (Imperative) Navigation  The usual rule of a Reach Hook:  Only use directly only at the root level of component function. (e.g. using useRouter)   useRouter has not just query that gives slug, it also has push() whose job is equivalent to Link component    Starting point of project with some templates\n Create a home page with list of cards Props are passed to a component.\nComponent NoteList then uses the notes prop)\nimport NoteItem from \u0026#34;./NoteItem\u0026#34;; import classes from \u0026#34;./NoteList.module.css\u0026#34;;  function NoteList(props) {  return (  \u0026lt;ul className={classes.list}\u0026gt;  {props.notes.map((note) =\u0026gt; (  \u0026lt;NoteItem  key={note.id}  id={note.id}  image={note.image}  title={note.title}  address={note.address}  /\u0026gt;  ))}  \u0026lt;/ul\u0026gt;  ); }  export default NoteList; Passing the props to component:\nimport NoteList from \u0026#34;../components/notes/NoteList\u0026#34;;  let note = [  {  id: 1,  image:  \u0026#34;https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg\u0026#34;,  title: \u0026#34;sunset\u0026#34;,  address: \u0026#34;Beach Hawaii\u0026#34;,  }, ];  function HomePage() {  return \u0026lt;NoteList notes={note} /\u0026gt;; }  export default HomePage;  Adding a New Note page - where user can add a new note.  Notice the path - its under pages\n But need a form component now!\n Create a form component Use this sample implementation:\n Uses useRef (standard React) Relies on a Prop onAddNote to do something, when submit is pressed. The prop as usual comes from the ? _____  the parent page  Page(nextjs) - Component (form) Page that contains component - is a style I see in Next or Maxmilian.      import { useRef } from \u0026#34;react\u0026#34;;  import Card from \u0026#34;../ui/Card\u0026#34;; import classes from \u0026#34;./NewNoteForm.module.css\u0026#34;;  function NewNoteForm(props) {  const titleInputRef = useRef();  const imageInputRef = useRef();  const addressInputRef = useRef();  const descriptionInputRef = useRef();   function submitHandler(event) {  event.preventDefault();   const enteredTitle = titleInputRef.current.value;  const enteredImage = imageInputRef.current.value;  const enteredAddress = addressInputRef.current.value;  const enteredDescription = descriptionInputRef.current.value;   const noteData = {  title: enteredTitle,  image: enteredImage,  address: enteredAddress,  description: enteredDescription,  };   props.onAddNote(noteData);  }   return (  \u0026lt;Card\u0026gt;  \u0026lt;form className={classes.form} onSubmit={submitHandler}\u0026gt;  \u0026lt;div className={classes.control}\u0026gt;  \u0026lt;label htmlFor=\u0026#34;title\u0026#34;\u0026gt;Note Title\u0026lt;/label\u0026gt;  \u0026lt;input type=\u0026#34;text\u0026#34; required id=\u0026#34;title\u0026#34; ref={titleInputRef} /\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;div className={classes.control}\u0026gt;  \u0026lt;label htmlFor=\u0026#34;image\u0026#34;\u0026gt;Note Image\u0026lt;/label\u0026gt;  \u0026lt;input type=\u0026#34;url\u0026#34; required id=\u0026#34;image\u0026#34; ref={imageInputRef} /\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;div className={classes.control}\u0026gt;  \u0026lt;label htmlFor=\u0026#34;address\u0026#34;\u0026gt;Address\u0026lt;/label\u0026gt;  \u0026lt;input type=\u0026#34;text\u0026#34; required id=\u0026#34;address\u0026#34; ref={addressInputRef} /\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;div className={classes.control}\u0026gt;  \u0026lt;label htmlFor=\u0026#34;description\u0026#34;\u0026gt;Description\u0026lt;/label\u0026gt;  \u0026lt;textarea  id=\u0026#34;description\u0026#34;  required  rows=\u0026#34;5\u0026#34;  ref={descriptionInputRef}  \u0026gt;\u0026lt;/textarea\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;div className={classes.actions}\u0026gt;  \u0026lt;button\u0026gt;Add Note\u0026lt;/button\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;/form\u0026gt;  \u0026lt;/Card\u0026gt;  ); }  export default NewNoteForm;  Import the form (component) in page: Form (component): Just created above\nPage pages\\new-note\\index.js\nImport and Use:\nimport NewNoteForm from \u0026#34;../../components/notes/NewNoteForm\u0026#34;;  function NewNotePage() {  return \u0026lt;NewNoteForm /\u0026gt;; } export default NewNotePage; Something is missing: The prop we need to pass!\nimport NewNoteForm from \u0026#34;../../components/notes/NewNoteForm\u0026#34;;  function NewNotePage() {  function onAddNoteHandler(noteData) {  console.log(noteData);  }   return \u0026lt;NewNoteForm onAddNote={onAddNoteHandler} /\u0026gt;; } export default NewNotePage;  Learnt from this error - Error: EISDIR: illegal operation on a directory, read because had creaed the folder new-note by mistake named as new-note.js pages\\new-note.js\\index.js. The error means node is trying to treat a folder (by mistake) as a file.\n  Add Layout and Navigation   Layout - to wrap out components Gives a general layout to our components.\n  Navigation Bar - for links\n  Use this ready template for Layout and Navigation as reference.\nAdding Layout Original pages\\_app.js:\nimport \u0026#39;../styles/globals.css\u0026#39;  function MyApp({ Component, pageProps }) {  return \u0026lt;Component {...pageProps} /\u0026gt; }  export default MyApp Adding Layout:\nimport \u0026#34;../styles/globals.css\u0026#34;; import Layout from \u0026#34;../components/layout/Layout\u0026#34;;  function MyApp({ Component, pageProps }) {  return (  \u0026lt;Layout\u0026gt;  \u0026lt;Component {...pageProps} /\u0026gt;  \u0026lt;/Layout\u0026gt;  ); }  export default MyApp; Add Navigation bar Its part of Layout! so by adding to _app.js, navigation also gets added to all pages!\nFix this small pending stuff in MainNavigation.js\n import Link user href Remove margin on top bar   Final!\n Programmatic Navigation (Imperative) We want the buttons to work (Show Details button on home list) On click - Load individual Note item So we would need link to single individual note URL, and can use Link.\n We could use the Link Component, or \u0026lt;button\u0026gt; component. But for learning, lets try programmatically changing pages (navigating)\n  using useRouter : General rule of React: use a react hook directly only at the root level of component function.   Go to index.js \u0026gt; look for components\u0026hellip;. \u0026gt; NoteItem has the button Show Details\n   Add onClick to \u0026lt;button\u0026gt;\n  Write the function - where!?? - got stuck here\na. In parent - and pass in propr and use here from prop?\nb. or in same NoteItem\n  Had to refer - example chooses to got with b.\nAb kya kare!\nTried this wrong:\nimport Card from \u0026#34;../ui/Card\u0026#34;; import classes from \u0026#34;./NoteItem.module.css\u0026#34;; import { useRouter } from \u0026#34;next/router\u0026#34;;  function NoteItem(props) {  const router = useRouter();  function handleShowDetailsClick(event) {  console.log(event);  let noteId = event.target.id;  router.push(`/${noteId}`);  }  ...  } Solution: Actually nothing to do ith event.target.id to get the URL.\n We want URL of page. We need nothing from button info. We can know the individual card\u0026rsquo;s (items\u0026rsquo;s) detail like key and since it is used on the URL as slug, we can use it - create URL - push on Router.  Using useRouter to get redirect using push: The key was passed originally as prop: \u0026hellip;and futher as prop: We can see that on click, it redirects to the URL! 😁 Although there is no such page yet, so we get an error.\n Add individual Note component At /pages/[niteId]/index.js\nimport { Fragment } from \u0026#34;react\u0026#34;;  function Note() {  return (  \u0026lt;Fragment\u0026gt;  \u0026lt;img  src=\u0026#34;https://www.nasa.gov/sites/default/files/thumbnails/image/pia23378-16.jpg\u0026#34;  alt=\u0026#34;selfie from mars\u0026#34;  \u0026gt;\u0026lt;/img\u0026gt;  \u0026lt;h1\u0026gt;First Note\u0026lt;/h1\u0026gt;  \u0026lt;p\u0026gt;This is Curiosity\u0026#39;s selfie from Mars\u0026lt;/p\u0026gt;  \u0026lt;/Fragment\u0026gt;  ); }  export default Note; The styling looks off. So create a new STYLING\n Naming the css files in a particular way - e.g. say component is Comp, then its css file should be named Comp.module.css. Doing this restricts the scope of the CSS class styles defined to Comp only. Its a React thing, that Next also supports. This is called CSS Modules\n Before going into styling let\u0026rsquo;s try to make everything on this page flexible: Create a pure component - that does everything from its props\nBy doing this we are also trying to keep pages folder lean\nCreate function component in components\\notes\\NoteDetail.js\nimport classes from \u0026#34;./NoteDetail.module.css\u0026#34;; function NoteDetail(props) {  return (  \u0026lt;segment className={classes.detail}\u0026gt;  \u0026lt;img src={props.image} alt={props.title}\u0026gt;\u0026lt;/img\u0026gt;  \u0026lt;h1\u0026gt;{props.title}\u0026lt;/h1\u0026gt;  \u0026lt;p\u0026gt;{props.details}\u0026lt;/p\u0026gt;  \u0026lt;/segment\u0026gt;  ); }  export default NoteDetail; Also create related CSS:\nat components\\notes\\NoteDetail.module.css\n.detail img {  /* Makes the large image fit the container */  width: 100%; }  .detail {  text-align: center; } Now pass dummy data as props:\nat pages\\[noteId]\\index.js\nimport NoteDetail from \u0026#34;../../components/notes/NoteDetail\u0026#34;; function NoteDetails() {  return (  \u0026lt;NoteDetail  title=\u0026#34;Selfie from Mars\u0026#34;  details=\u0026#34;This is Curiosity\u0026#39;s selfie from Mars\u0026#34;  image=\u0026#34;https://www.nasa.gov/sites/default/files/thumbnails/image/pia23378-16.jpg\u0026#34;  \u0026gt;\u0026lt;/NoteDetail\u0026gt;  ); }  export default NoteDetails; ","permalink":"https://anantcode.github.io/posts/2022-05-08-day2-100doc/","summary":"Day 2 Key Learnings:\n pages folder name is reserved in nextjs.  Others like components is not reserved.   How props are passed to a component. Utilize _app.js for anything that affects all pages like Layout - wrap with Layout component, Navigation (with links) etc Using Programmatic (Imperative) Navigation  The usual rule of a Reach Hook:  Only use directly only at the root level of component function.","title":"Day 2 #100DaysOfCode"},{"content":"The most updated documentation to get started with Heroku is the official Heroku Dev Center documentation.\nFollowing is to get started with Node.js on Heroku\n1. Install git and perform first time git setup  Git installation First-time Git setup  2. Install heroku cli from here\n3. Login in heroku using heroku cli heroku login On successful authentication, you get success message.\nLogging in... done\rLogged in as xxxxxxxx@xxxxx.com Prepare the app If dont already have the project in your local, clone it from your remote:\ngit clone https://github.com/heroku/node-js-getting-started.git\rcd node-js-getting-started Create an App on Heroku you can either use the CLI or do it on Heroku UI.\nUsing CLI $ heroku create Creating sharp-rain-871... done, stack is heroku-18 http://sharp-rain-871.herokuapp.com/ | https://git.heroku.com/sharp-rain-871.git Git remote heroku added When you create an app, a git remote (called heroku) is also created and associated with your local git repository.\nHeroku generates a random name (in this case sharp-rain-871) for your app, or you can pass a parameter to specify your own app name.\nUsing Heroku UI Create from your Heroku Dashboard: Deploy the app $ git push heroku main  Note: If you did not use the heroku create on heroku cli, you may get the error:\n $ git push heroku main\rfatal: \u0026#39;heroku\u0026#39; does not appear to be a git repository\rfatal: Could not read from remote repository. Please make sure you have the correct access rights\rand the repository exists. In such case, add the 2nd remote as heroku (get the URL for you app from Heroku website) (first remote is the GitHub remote) by:\n$ git remote add heroku https://git.heroku.com/xxxx You can check remotes now:\nDeploy git push heroku main should give logs like:\n$ git push heroku main\rEnumerating objects: 27, done.\rCounting objects: 100% (27/27), done.\rDelta compression using up to 4 threads\rCompressing objects: 100% (23/23), done.\rWriting objects: 100% (27/27), 12.46 KiB | 797.00 KiB/s, done.\rTotal 27 (delta 11), reused 3 (delta 0), pack-reused 0\rremote: Compressing source files... done.\rremote: Building source:\rremote:\rremote: -----\u0026gt; Building on the Heroku-20 stack\rremote: -----\u0026gt; Determining which buildpack to use for this app\rremote: -----\u0026gt; Node.js app detected\rremote:\rremote: -----\u0026gt; Creating runtime environment\rremote:\rremote: NPM_CONFIG_LOGLEVEL=error\rremote: NODE_VERBOSE=false\rremote: NODE_ENV=production\rremote: NODE_MODULES_CACHE=true\rremote:\rremote: -----\u0026gt; Installing binaries\rremote: engines.node (package.json): unspecified\rremote: engines.npm (package.json): unspecified (use default)\rremote:\rremote: Resolving node version 16.x...\rremote: Downloading and installing node 16.15.0...\rremote: Using default npm version: 8.5.5\rremote:\rremote: -----\u0026gt; Installing dependencies\rremote: Installing node modules\rremote: added 78 packages, and audited 79 packages in 2s\rremote:\rremote: 19 packages are looking for funding\rremote: run `npm fund` for details\rremote:\rremote: found 0 vulnerabilities\rremote:\rremote: -----\u0026gt; Build\rremote:\rremote: -----\u0026gt; Caching build\rremote: - node_modules\rremote:\rremote: -----\u0026gt; Pruning devDependencies\rremote:\rremote: up to date, audited 79 packages in 447ms\rremote:\rremote: 19 packages are looking for funding\rremote: run `npm fund` for details\rremote:\rremote: found 0 vulnerabilities\rremote:\rremote: -----\u0026gt; Build succeeded!\rremote: -----\u0026gt; Discovering process types\rremote: Procfile declares types -\u0026gt; (none)\rremote: Default types for buildpack -\u0026gt; web\rremote:\rremote: -----\u0026gt; Compressing...\rremote: Done: 32.5M\rremote: -----\u0026gt; Launching...\rremote: Released v3\rremote: https://this-day8.herokuapp.com/ deployed to Heroku\rremote:\rremote: Verifying deploy... done.\rTo https://git.heroku.com/this-day8.git\r* [new branch] main -\u0026gt; main But on visiting the URL I got error:\nCheck logs for troubleshooting heroku logs \u0026ndash;tail\nTurns out nodemon was not found!\n2022-05-06T09:58:26.000000+00:00 app[api]: Build succeeded\r2022-05-06T09:58:27.023226+00:00 heroku[web.1]: Starting process with command `npm start`\r2022-05-06T09:58:28.969211+00:00 app[web.1]:\r2022-05-06T09:58:28.969223+00:00 app[web.1]: \u0026gt; testapifors@1.0.0 start\r2022-05-06T09:58:28.969223+00:00 app[web.1]: \u0026gt; nodemon server.js\r2022-05-06T09:58:28.969224+00:00 app[web.1]:\r2022-05-06T09:58:28.974214+00:00 app[web.1]: sh: 1: nodemon: not found\r2022-05-06T09:58:29.085724+00:00 heroku[web.1]: Process exited with status 127\r2022-05-06T09:58:29.234553+00:00 heroku[web.1]: State changed from starting to crashed\r2022-05-06T09:58:29.251259+00:00 heroku[web.1]: State changed from crashed to starting\r2022-05-06T09:58:30.864850+00:00 heroku[web.1]: Starting process with command `npm start`\r2022-05-06T09:58:32.548489+00:00 app[web.1]:\r2022-05-06T09:58:32.548500+00:00 app[web.1]: \u0026gt; testapifors@1.0.0 start\r2022-05-06T09:58:32.548500+00:00 app[web.1]: \u0026gt; nodemon server.js\r2022-05-06T09:58:32.548500+00:00 app[web.1]:\r2022-05-06T09:58:32.554184+00:00 app[web.1]: sh: 1: nodemon: not found\r2022-05-06T09:58:32.671680+00:00 heroku[web.1]: Process exited with status 127\r2022-05-06T09:58:32.851593+00:00 heroku[web.1]: State changed from starting to crashed nodemon not found! changed the package.json to not use nodemon, and use node instead, on npm start\nPut nodemon in start.dev script in package.json\nRetry: ..\r..\r2022-05-06T10:12:06.000000+00:00 app[api]: Build succeeded\r2022-05-06T10:12:06.034850+00:00 heroku[web.1]: State changed from crashed to starting\r2022-05-06T10:12:07.725643+00:00 heroku[web.1]: Starting process with command `npm start`\r2022-05-06T10:12:09.567392+00:00 app[web.1]: 2022-05-06T10:13:13.742775+00:00 app[web.1]: \u0026gt; node server.js\r2022-05-06T10:13:13.742775+00:00 app[web.1]:\r2022-05-06T10:13:13.934105+00:00 app[web.1]: Server started on port 3000\r2022-05-06T10:14:07.870659+00:00 heroku[router]: at=error code=H20 desc=\u0026#34;App boot timeout\u0026#34; method=GET path=\u0026#34;/wiki/today\u0026#34; host=this-day8.herokuapp.com request_id=be0d1924-0259-46d1-8b71-79eb4ee86ae6 fwd=\u0026#34;183.83.140.195\u0026#34; dyno= connect= service= status=503 bytes= protocol=https\r2022-05-06T10:14:10.927180+00:00 heroku[web.1]: Error R10 (Boot timeout) -\u0026gt; Web process failed to bind to $PORT within 60 seconds of launch\r2022-05-06T10:14:10.958959+00:00 heroku[web.1]: Stopping process with SIGKILL\r2022-05-06T10:14:11.227878+00:00 heroku[web.1]: Process exited with status 137\r2022-05-06T10:14:11.278031+00:00 heroku[web.1]: State changed from starting to crashed\r2022-05-06T10:14:11.718507+00:00 heroku[router]: at=error code=H10 desc=\u0026#34;App crashed\u0026#34; method=GET path=\u0026#34;/wiki/today\u0026#34; host=this-day8.herokuapp.com request_id=6ac67c9b-a0df-4c51-8c09-6ceaee4e30f7 fwd=\u0026#34;183.83.140.195\u0026#34; dyno= connect= service= status=503 bytes= protocol=https\r2022-05-06T10:14:12.789253+00:00 heroku[router]: at=error code=H10 desc=\u0026#34;App crashed\u0026#34; method=GET path=\u0026#34;/wiki/today\u0026#34; host=this-day8.herokuapp.com request_id=71d9a0f5-84cc-49d4-822a-280f47d0f17d fwd=\u0026#34;183.83.140.195\u0026#34; dyno= connect= service= status=503 bytes= protocol=https Notice Error R10 (Boot timeout) -\u0026gt; Web process failed to bind to $PORT within 60 seconds of launch\nJust starting your express server at process.env.PORT fixes this. Heroku automatically assigns a port that can be used by referencing process.env.PORT\nSee this SO answer for more.\n","permalink":"https://anantcode.github.io/posts/2022-05-05-deploy-to-heroku/","summary":"The most updated documentation to get started with Heroku is the official Heroku Dev Center documentation.\nFollowing is to get started with Node.js on Heroku\n1. Install git and perform first time git setup  Git installation First-time Git setup  2. Install heroku cli from here\n3. Login in heroku using heroku cli heroku login On successful authentication, you get success message.\nLogging in... done\rLogged in as xxxxxxxx@xxxxx.com Prepare the app If dont already have the project in your local, clone it from your remote:","title":"Deploy to Heroku"},{"content":"Ctrl + Shift + A lets you type and select tab by its title:\n","permalink":"https://anantcode.github.io/posts/2022-05-04-too-many-chrome-tabs/","summary":"Ctrl + Shift + A lets you type and select tab by its title:","title":"Too many Chrome Tabs? Use this to find your tab"},{"content":"Google Search Console is a free service offered by Google that helps you monitor, maintain, and troubleshoot your site\u0026rsquo;s presence in Google Search results.\nYou don\u0026rsquo;t have to sign up for Search Console to be included in Google Search results, but Search Console helps you understand and improve how Google sees your site.\nSearch Console offers tools and reports for the following actions:\n Confirm that Google can find and crawl your site. Fix indexing problems and request re-indexing of new or updated content. View Google Search traffic data for your site: how often your site appears in Google Search, which search queries show your site, how often searchers click through for those queries, and more.  Add/verify your property (your site) with Google Search Console Google Search Console lets you add your site after verification:\nYou can use any of the multiple verification methods: In this article we will be talking about the HTML tag method.\nFaced problem with adding meta verification tag on my PaperMod theme Hugo site Followed the PaperMod\u0026rsquo;s theme\u0026rsquo;s documentation to add the google-site-verification meta tag.\nOn inspecting the homepage, did not find the \u0026lt;meta\u0026gt; tag added to the HTML.\nLooking at themes\\PaperMod\\layouts\\partials\\head.html\nModified my config.yml\nand on rebuild got the meta tag added finally!\n","permalink":"https://anantcode.github.io/posts/2022-05-03-google-search-console-verification-with-papermod-hugo/","summary":"Google Search Console is a free service offered by Google that helps you monitor, maintain, and troubleshoot your site\u0026rsquo;s presence in Google Search results.\nYou don\u0026rsquo;t have to sign up for Search Console to be included in Google Search results, but Search Console helps you understand and improve how Google sees your site.\nSearch Console offers tools and reports for the following actions:\n Confirm that Google can find and crawl your site.","title":"How to verifiy Hugo Papermod theme site on Google Search Console"},{"content":"Observed that when doing GET using Axios on https://www.twitter.com/\u0026lt;id\u0026gt; I did not get the HTML that I was expecting (having the tweets etc.) (although got the text in HTML on browser)\nSaw this on googling: Twitter has updated their layout to render data primarily through Javascript. You will need to scrape https://mobile.twitter.com rather than https://twitter.com. As mobile twitter still renders html in the source. We will be updating the scraper soon to be able to crawl js rendered content.\nTried mobile. too but as of 2022 May it seems mobile also doest have the HTML.\n","permalink":"https://anantcode.github.io/posts/2022-05-01-tried-scraping-twitter/","summary":"Observed that when doing GET using Axios on https://www.twitter.com/\u0026lt;id\u0026gt; I did not get the HTML that I was expecting (having the tweets etc.) (although got the text in HTML on browser)\nSaw this on googling: Twitter has updated their layout to render data primarily through Javascript. You will need to scrape https://mobile.twitter.com rather than https://twitter.com. As mobile twitter still renders html in the source. We will be updating the scraper soon to be able to crawl js rendered content.","title":"I tried scraping Twitter"},{"content":"They serve two different purposes.\nNodemon to restart a node app when file changes in a directory are detected.\nLive server will refresh your browser when changes are detected to any supported file types (e.g. HTML, JS, CSS). It also enables Ajax requests when you are working locally — these don\u0026rsquo;t normally work with the file:// protocol.\n","permalink":"https://anantcode.github.io/posts/2022-05-01-nodemon-vs-liveserver/","summary":"They serve two different purposes.\nNodemon to restart a node app when file changes in a directory are detected.\nLive server will refresh your browser when changes are detected to any supported file types (e.g. HTML, JS, CSS). It also enables Ajax requests when you are working locally — these don\u0026rsquo;t normally work with the file:// protocol.","title":"Nodemon vs Live Server"},{"content":"https://superuser.com/questions/341192/how-can-i-display-the-contents-of-an-environment-variable-from-the-command-promp\nYou can see all env. variables using:\nset  Works with cmd - Yes Works with Windows Terminal - No  In Windows Command-Prompt see only the Path variable:\necho %PATH% ","permalink":"https://anantcode.github.io/posts/2022-05-01-path-environment-variable-windows/","summary":"https://superuser.com/questions/341192/how-can-i-display-the-contents-of-an-environment-variable-from-the-command-promp\nYou can see all env. variables using:\nset  Works with cmd - Yes Works with Windows Terminal - No  In Windows Command-Prompt see only the Path variable:\necho %PATH% ","title":"Path environment variable in Windows"},{"content":"https://stackoverflow.com/questions/1098786/run-bash-script-from-windows-powershell\n","permalink":"https://anantcode.github.io/posts/2022-05-01-run-sh-from-anywhere/","summary":"https://stackoverflow.com/questions/1098786/run-bash-script-from-windows-powershell","title":"Run Shell script from anywhere on Windows"},{"content":"Install a npm package globally npm install -g \u0026lt;name\u0026gt; Installing without -g option will install a module to your working directory (in node_modules folder)\nCheck where global packages/libraries are installed: npm list -g to see which global libraries are installed and where they\u0026rsquo;re located.\nAdditionally --depth=0 can be used to avoid including every package\u0026rsquo;s dependencies in the tree view (show only the global packages that you installed, not dependencies of them)\nnpm list -g --depth=0  References: https://stackoverflow.com/questions/17937960/how-to-list-npm-user-installed-packages\n","permalink":"https://anantcode.github.io/posts/2022-05-01-where-are-global-npm-packages-installed/","summary":"Install a npm package globally npm install -g \u0026lt;name\u0026gt; Installing without -g option will install a module to your working directory (in node_modules folder)\nCheck where global packages/libraries are installed: npm list -g to see which global libraries are installed and where they\u0026rsquo;re located.\nAdditionally --depth=0 can be used to avoid including every package\u0026rsquo;s dependencies in the tree view (show only the global packages that you installed, not dependencies of them)","title":"Where are Global npm packages installed?"},{"content":"DNS Lookup (resolving the web address) The first step in navigating to a web page is finding where the assets for that page are located (HTML, CSS, Javascript and other kind of files)\nIf we\u0026rsquo;ve never visited this site before, a Domain Name System (DNS) lookup must happen.\n DNS servers are computer servers that contain a database of public IP addresses and their associated hostnames (this is commonly compared to a phonebook in that people\u0026rsquo;s names are associated to a particular phone number). In most cases these servers serve to resolve or translate those names to IP addresses as requested (right now there are over 600 different DNS root servers distributed across the world).\n So when we request a DNS lookup, what we actually do is interogate one of these servers and ask to find out which IP address coresponds to the https://example.com name.\nAfter this initial lookup, the IP address will probably be cached for a while, so next visits on the same website will happen faster since there\u0026rsquo;s no need for a DNS lookup (remember, a DNS lookup only happens the first time we visit a website).\nTCP (Transmission Control Protocol) Handshake Once the web browser knows the IP address of the website, it will try and set up a connection to the server holding the resources, via a TCP three-way handshake (also called SYN-SYN-ACK, or more accurately SYN, SYN-ACK, ACK, because there are three messages transmitted by TCP to negotiate and start a TCP session between two computers).\n TCP stands for Transmission Control Protocol, a communications standard that enables application programs and computing devices to exchange messages over a network. It is designed to send packets (of data) across the Internet and ensure the successful delivery of data and messages over networks.\n  The TCP Handshake is a mechanism designed so that two entities (in our case the browser and the server) that want to pass information back and forth to each other can negotiate the parameters of the connection before transmitting data.\n   The browser sends a SYNC message to the server and asks for SYNchronization (synchronization means the connection).\n  The server will then reply with a SYNC-ACK message (SYNChronization and ACKnowledgement):\n  In the last step, the browser will reply with an ACK message.\n  Now that the TCP connection (a two way connection) has been established through the 3 way handshake, the TLS negotiation can begin.\nTLS negotiation For secure connections established over HTTPS, anotherhandshake is needed.\nThis handshake (TLS negotiation)\n determines which cipher will be used to encrypt the communication, verifies the server and establishes that a secure connection is in place before beginning the actual transfer of data.   Transport Layer Security (TLS), the successor of the now-deprecated Secure Sockets Layer (SSL), is a cryptographic protocol designed to provide communications security over a computer network. The protocol is widely used in applications such as email and instant messaging but its use in securing HTTPS remains the most publicly visible. Since applications can communicate either with or without TLS (or SSL), it is necessary for the client (browser) to request that the server sets up a TLS connection.\n  Reference: https://dev.to/arikaturika/how-web-browsers-work-part-1-with-illustrations-1nid\n","permalink":"https://anantcode.github.io/posts/2022-04-30-how-web-browsers-work-1/","summary":"DNS Lookup (resolving the web address) The first step in navigating to a web page is finding where the assets for that page are located (HTML, CSS, Javascript and other kind of files)\nIf we\u0026rsquo;ve never visited this site before, a Domain Name System (DNS) lookup must happen.\n DNS servers are computer servers that contain a database of public IP addresses and their associated hostnames (this is commonly compared to a phonebook in that people\u0026rsquo;s names are associated to a particular phone number).","title":"How Web Browsers Work Part - 1"},{"content":"When working on multiple simultaneously open VSCode windows, use Peacock for Visual Studio Code\nPeacock enables you to easily distinguish between and locate different VSCode workspaces.\nYou can set color of your choice for each of the VSCode projects (at workspace level).\nSo you can have different colors for each of your frontend, backend etc. apps.\n keywords:\nmultiple windows in vscode, window management,\n","permalink":"https://anantcode.github.io/posts/2022-04-28-peacock-vscode-extension/","summary":"When working on multiple simultaneously open VSCode windows, use Peacock for Visual Studio Code\nPeacock enables you to easily distinguish between and locate different VSCode workspaces.\nYou can set color of your choice for each of the VSCode projects (at workspace level).\nSo you can have different colors for each of your frontend, backend etc. apps.\n keywords:\nmultiple windows in vscode, window management,","title":"Peacock VSCode Extension - working with multiple VSCode workspaces made easy"},{"content":"My email ID (with gmail) contains. .\nLike ab.cd@gmail.com.\nUsually with Google/gmail it is not a problem - login etc work as usual if I skip the .\nab.cd@gmail.com abcd@gmail.com\nOn Gmail, both are equivalemt. Login works with both, as Google ignores dots in Gmail addresses.\nBut for GitHub it is not the case.\n I had GH setup with ab.cd@gmail.com I was using commit email without the dot, i.e. git config user.email as abcd@gmail.com  According to GitHub the contribution is counted only if email in commit-email is same as the one defined on GitHub\nChanged the config in my local repo\n updated the email in git config  git config user.email \u0026#34;ab.cd@gmail.com\u0026#34; and the contributions started showing fron thet point.\nUnfortunately, the older contributions with the \u0026ldquo;wrong\u0026rdquo; email still dont show. I may look into it later, if there is a way.\n","permalink":"https://anantcode.github.io/posts/2022-04-26-github-contribution-not-counted-due-to-dot-in-email/","summary":"My email ID (with gmail) contains. .\nLike ab.cd@gmail.com.\nUsually with Google/gmail it is not a problem - login etc work as usual if I skip the .\nab.cd@gmail.com abcd@gmail.com\nOn Gmail, both are equivalemt. Login works with both, as Google ignores dots in Gmail addresses.\nBut for GitHub it is not the case.\n I had GH setup with ab.cd@gmail.com I was using commit email without the dot, i.e. git config user.","title":"GitHub Contribution not counted!"},{"content":"When creating blog posts on my Hugo site, I used to run into requirement of adding image - there are 2 choices:\n Put the image as static file in my site Should I use a public URL from a quick Google search (hosted by someone else!)  I decided to go with a 3rd option - host my own image on cloud and use its URL.\nDoing it with imgur.\nIt allows unlimited storage with limit of 50 uploads per hour.\n At first I signed up on imgur on the onset, without realizing it is possible to upload even without signing up, and that too using the screenshot capture tool that I already use (Greenshot).\n Tools to upload screenshots to imgur myimgur Found myimgur on a quick search. Didnt find it to have the most friendly UX.\nGreenshot (preferred) Greenshot has an option to Upload to imgur!\nUsing this option uploads your image to imgur anonymously! No account needed. The link to the uploaded image gets added to the clipboard - simply go and paste it where you need the link! (in your md file if writing post).\n Pro Tip 1: In case you overwrite your clipboard by accidently copying something, you can use the Clipboard History - press Win + V to paste any past copied content from clipboard (image, text).\n In case your Clipboard history is not enabled, you can still go and look at the URL at following path:\n Open C:\\Users\\\u0026lt;your use name\u0026gt;\\AppData\\Roaming\\Greenshot\\Greenshot.ini Search for history or Imgur upload history and you will see:  ; Imgur upload history (ImgurUploadHistory.hash=deleteHash)\rImgurUploadHistory.lsVueG2=BuN9UvajnoT0mNY\rImgurUploadHistory.BSmH9Ti=ZNiHg5XxmRzQxzO\rImgurUploadHistory.zqH2N6T=QkbcS7GOt0zfeJF\rImgurUploadHistory.57OEveQ=pMjHK1yBmHk18zQ courtesy: This SO answer.\nHere e.g. lsVueG2 denotes the image uploaded, and the image can be accessed by https://i.imgur.com/lsVueG2.png and so on.\n Pro Tip 2: If you accidently uploaded a file that you did not intend to, the image can be accessed by anyone who has the link. Fortunately there is a way to delete the image after its uploaded anonymously - you can use the information in C:\\Users\\\u0026lt;your use name\u0026gt;\\AppData\\Roaming\\Greenshot\\Greenshot.ini to do this:\n ImgurUploadHistory.lsVueG2=BuN9UvajnoT0mNY The 15 character hash value after = can be used to delete the image:\nBuN9UvajnoT0mNY # this is called deletehash The 15 digit alpha-numeric is called deletehash.\nUse it to delete the anonymously uploaded image:\nimgur.com/delete/{deletehash} ","permalink":"https://anantcode.github.io/posts/2022-04-26-save-your-images-to-imgur/","summary":"When creating blog posts on my Hugo site, I used to run into requirement of adding image - there are 2 choices:\n Put the image as static file in my site Should I use a public URL from a quick Google search (hosted by someone else!)  I decided to go with a 3rd option - host my own image on cloud and use its URL.\nDoing it with imgur.","title":"Save Your Images to imgur and use URL in blog"},{"content":"What is the smallest number that can be represented without a problem in JavaScript, for integers? Number.MIN_SAFE_INTEGER is a constant in JS that represents the smallest possible value that can be safely used, that is  (-(2^53 - 1)) or -9007199254740991\nFor values smaller that this, BigInt can be used\n \u0026ldquo;Safe\u0026rdquo; refers to the ability of JavaScript to represent integers exactly and to correctly compare them.\n Example: Value of Number.MIN_SAFE_INTEGER value = Number.MIN_SAFE_INTEGER; console.log(value); // -9007199254740991  value_minus_1 = value - 1; value_minus_2 = value - 2; // JS Number cannot exactly represent integers smaller than \u0026#39;value\u0026#39; // and correctly compare them console.log(value_minus_1 == value_minus_2); // true Output\n-9007199254740991\rtrue Why does this happen! The reasoning behind this number is that JavaScript uses double-precision floating-point format numbers as specified in IEEE 754 and can only safely represent numbers between -(2^53 - 1) and 2^53\nRelated Recommended Readings:\n Number.MAX_SAFE_INTEGER Number.isSafeInteger() BigInt   Reference:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n  https://www.programiz.com/javascript/library/number/min_safe_integer\n  ","permalink":"https://anantcode.github.io/posts/2022-04-26-min-safe-integer-in-js/","summary":"What is the smallest number that can be represented without a problem in JavaScript, for integers? Number.MIN_SAFE_INTEGER is a constant in JS that represents the smallest possible value that can be safely used, that is  (-(2^53 - 1)) or -9007199254740991\nFor values smaller that this, BigInt can be used\n \u0026ldquo;Safe\u0026rdquo; refers to the ability of JavaScript to represent integers exactly and to correctly compare them.\n Example: Value of Number.","title":"Minimum Safe Integer in JavaScript"},{"content":"Sometimes all those open Chrome tabs may be too much for your RAM to handle.\nUse the following on your Powershell to kill all chrome services:\ntaskkill /F /IM chrome.exe  ","permalink":"https://anantcode.github.io/posts/kill-all-chrome-processes-win/","summary":"Sometimes all those open Chrome tabs may be too much for your RAM to handle.\nUse the following on your Powershell to kill all chrome services:\ntaskkill /F /IM chrome.exe  ","title":"How to kill all Chrome processes on Windows"},{"content":"I have following global git configs:\ngit config commit.gpgsign # true for work, false for personal git config user.name # different for work(global) and personal git config user.email # different for work(global) and personal Assuming the default(global) git config is my work related configs, which I dont want to use for personal git repos\nSo I can switch to personal every time I work on a personal project. To change all the 3 with predetermined values, use following shell script.\n#!/bin/bash  echo \u0026#34;Settings before update:\u0026#34;  git config user.name git config user.email git config commit.gpgsign  git config user.name \u0026#34;\u0026lt;your-personal-name\u0026gt;\u0026#34; git config user.email \u0026#34;\u0026lt;your-personal-email\u0026gt;\u0026#34; git config commit.gpgsign false  echo echo \u0026#34;Settings updated to personal\u0026#34; Create the .sh file say gitpersonal.sh and place in a location from where it can be run anywhere (see how to run a .sh file from anywhere in gitbash and powershell)\nUpdate: Improved script based on above. Added color. Added pause.\n#!/bin/bash  # Personal Info PERSONAL_EMAIL=\u0026#34;anant.code@gmail.com\u0026#34; PERSONAL_USER=\u0026#34;Anant\u0026#34;  # Colors RED=\u0026#39;\\033[0;31m\u0026#39; LIGHTGREEN=\u0026#39;\\033[1;32m\u0026#39; NC=\u0026#39;\\033[0m\u0026#39; # No Color  echo \u0026#34;in pwd:\u0026#34; pwd echo \u0026#34;Settings before update:\u0026#34;  printf \u0026#34;${RED}git config user.name${NC}\\n\u0026#34; git config user.name printf \u0026#34;${RED}git config user.email${NC}\\n\u0026#34; git config user.email printf \u0026#34;${RED}git config commit.gpgsign${NC}\\n\u0026#34; git config commit.gpgsign  git config user.name $PERSONAL_USER git config user.email $PERSONAL_EMAIL git config commit.gpgsign false  echo echo \u0026#34;Settings updated to personal!\u0026#34; echo \u0026#34;New Settings:\u0026#34;  printf \u0026#34;${LIGHTGREEN}git config user.name${NC}\\n\u0026#34; git config user.name printf \u0026#34;${LIGHTGREEN}git config user.email${NC}\\n\u0026#34; git config user.email printf \u0026#34;${LIGHTGREEN}git config commit.gpgsign${NC}\\n\u0026#34; git config commit.gpgsign  echo \u0026#34;press any key to close...\u0026#34; read -n 1 -s ","permalink":"https://anantcode.github.io/posts/bash-script-to-switch-git-config-in-new-repo/","summary":"I have following global git configs:\ngit config commit.gpgsign # true for work, false for personal git config user.name # different for work(global) and personal git config user.email # different for work(global) and personal Assuming the default(global) git config is my work related configs, which I dont want to use for personal git repos\nSo I can switch to personal every time I work on a personal project. To change all the 3 with predetermined values, use following shell script.","title":"Bash Script to switch Git Configs"},{"content":"Based on the way described in a previous article, following shell script can be run to create new md file (new blog post) based on archetype.\n#!/bin/sh echo \u0026#34;Enter post title (.md will be automatically added)\u0026#34; echo \u0026#34;Post title: \u0026#34; read posttitle  hugo new -k post posts/$posttitle.md running this will create a new md file in /content/posts based on the archetype in /archetype\nCreate a file called new.sh and place this .sh file in root of hugo project, and run:\n PowerShell and bash: ./new.sh  ","permalink":"https://anantcode.github.io/bash-new-hugo-post/","summary":"Based on the way described in a previous article, following shell script can be run to create new md file (new blog post) based on archetype.\n#!/bin/sh echo \u0026#34;Enter post title (.md will be automatically added)\u0026#34; echo \u0026#34;Post title: \u0026#34; read posttitle  hugo new -k post posts/$posttitle.md running this will create a new md file in /content/posts based on the archetype in /archetype\nCreate a file called new.sh and place this .","title":"Bash Script to create new page (MD File) in Hugo"},{"content":"Following the \u0026ldquo;2 repo\u0026rdquo; approach of hugo site as described in previous post How to create Hugo Blog hosted on GitHub:\n First repo for hugo-project Second repo for the static site (public dir in hugo project is created as git submodule  I came across this approach first here.\nWhen using this approach, I tried to do cleanup of public directory after some inital builds, because in previous builds they were many folders and files created which I no longer wanted to be present on root of generated site(these were things like multiple folders for images - later I wanted to put all images under single directory), but in subsequent builds using hugo command these files and directories were not getting removed.\nMy first approach was to delete the public folder and then build again using hugo command, but the problem was that the git submodule configuration also gets removed if I delete the public folder. Adding the git submodule again was tedious, had to use some force options etc.\nSolution to this was to avoid deleting public folder and instead delete its contents, so as to not delete .git and .github from the public dir, but This was a lot of manual steps, considering already there are so many manual steps like\n pushing to the first repo, doing a build, and pushing the second repo  So I decided to write a shell script.\nBut on a quick search found that people have already done it! Found this bat file that would work in windows, by ycchaos on this forum.\n@echo off \trem This script is help to deploy public from Hugo to GitPage \trem public directory at root is generated by hugo (and is git submodule as your xxx-github-io)  \trem Put this script under your hugo site\u0026#39;s root (near by hugo config file (config.yml or config.toml etc)) \trem -------------------------------------------------------------  \trem Input commit message \tset /P commit-message=Please input your git commit message: \techo Your commit message: \u0026#34;%commit-message%\u0026#34; \techo %CD%  \trem cd to /public \tcd public \techo %CD%  \trem Keep .git and .github workflow alive \tset \u0026#34;keep1=.git\u0026#34; \tset \u0026#34;keep2=.github\u0026#34; \techo keep %keep1% \techo keep %keep2%  \trem Delete others \tFOR /d %%a IN (\u0026#34;%CD%\\*\u0026#34;) DO IF /i NOT \u0026#34;%%~nxa\u0026#34;==\u0026#34;%keep2%\u0026#34; RD /S /Q \u0026#34;%%a\u0026#34; \tFOR %%a IN (\u0026#34;%CD%\\*\u0026#34;) DO IF /i NOT \u0026#34;%%~nxa\u0026#34;==\u0026#34;%keep1%\u0026#34; DEL \u0026#34;%%a\u0026#34;  \trem Back to root folder \tcd.. \techo Back to... %CD%  \trem Build hugo \thugo  \trem Push public to GitPage repository \tcd public \tgit add --all \tgit commit -m \u0026#34;%commit-message%\u0026#34; \tgit push \tcd..  \trem Push Hugo to source repository \tgit add --all \tgit commit -m \u0026#34;%commit-message%\u0026#34; \tgit push  \tpause Place this file on root of your hugo project. Optionally you can add it to .gitignore\nRun this batch script\n by doublclicking the bat file in powershell or gitbash by ./deploy.bat or ./deploy  in powershell, abort by Ctrl + C Ctrl + C doesnt work to abort in gitbash, directly exit gitbash window if needed.    ","permalink":"https://anantcode.github.io/posts/bat-script-to-deploy-and-clean-static-site-root/","summary":"Following the \u0026ldquo;2 repo\u0026rdquo; approach of hugo site as described in previous post How to create Hugo Blog hosted on GitHub:\n First repo for hugo-project Second repo for the static site (public dir in hugo project is created as git submodule  I came across this approach first here.\nWhen using this approach, I tried to do cleanup of public directory after some inital builds, because in previous builds they were many folders and files created which I no longer wanted to be present on root of generated site(these were things like multiple folders for images - later I wanted to put all images under single directory), but in subsequent builds using hugo command these files and directories were not getting removed.","title":"Hugo: Batch script to deploy to GitHub after cleaning the output public dir (static-site's root)"},{"content":"If you had a local repo and a remote repo connected to it (say on GitHub) - and for some reason you decide to change the repo name on remote, what do you need to do locally to keep things working? (as push/fetch/pull from local start to fail due to rename)\nRename the remote repo(1,2), and then tweak the local repo(3,4,5) so that things work as expected:\n Go to the remote host (for example, https://github.com/user/project). Rename the repo following the host\u0026rsquo;s instructions (may differ from host to host, but you should be able to find it under Settings). Determine the new URL (for example, git@github.com:user/project-new.git) Go to your local repository directory (i.e., open a command prompt and cd to the repository\u0026rsquo;s directory). Set the new URL using Git:  git remote set-url origin git@github.com:user/project-new.git and your push/pull/fetch should start working as usual\nEDIT:\nI later found out that in case of GitHub, it automatically takes care of repo rename - it continues to remember the old repo URL and any push, clone, fetch done on old remote URL is automatically redirected to the new URL.\nHowever they do recommend changing URL on local As described in this article to avoid any confusion\nWhat could be the confusion you ask? As also mentioned in above GitHub documentation:\n Warning: If you create a new repository under your account in the future, do not reuse the original name of the renamed repository. If you do, redirects to the renamed repository will break.\n I faced this problem! and had to use the changing remote URL.\n Changed remote repo name from A to B. Created a new repo with name A Faced problem with local B push etc.  So be safe - if you rename a Remote repo also update the local remote repo URL\n","permalink":"https://anantcode.github.io/posts/9-renaming-remote-git-repo/","summary":"If you had a local repo and a remote repo connected to it (say on GitHub) - and for some reason you decide to change the repo name on remote, what do you need to do locally to keep things working? (as push/fetch/pull from local start to fail due to rename)\nRename the remote repo(1,2), and then tweak the local repo(3,4,5) so that things work as expected:\n Go to the remote host (for example, https://github.","title":"Renaming remote git repo"},{"content":"Hi there, I am Anant.\nI enjoy software development and working and learning the amazing technologies of our time.\nEnjoy music, playing and experimenting with instruments.\nAstronomy fascinates me, love watching Astrum\n Principal Engineer at Oracle NetSuite.\nBTech, IIT(BHU) Electrical Engineering.\nCurrently into JavaScript, Node.js, Java, Android Development.\nPlease reach me at anant.code@gmail.com\n","permalink":"https://anantcode.github.io/about/","summary":"Hi there, I am Anant.\nI enjoy software development and working and learning the amazing technologies of our time.\nEnjoy music, playing and experimenting with instruments.\nAstronomy fascinates me, love watching Astrum\n Principal Engineer at Oracle NetSuite.\nBTech, IIT(BHU) Electrical Engineering.\nCurrently into JavaScript, Node.js, Java, Android Development.\nPlease reach me at anant.code@gmail.com","title":"About"},{"content":"https://formito.com/tools/favicon\n","permalink":"https://anantcode.github.io/posts/8-free-svg-favicon-generator-from-text/","summary":"https://formito.com/tools/favicon","title":"Free Svg Favicon Generator From Text"},{"content":"redketchup.io has a free favicon generator(only generates PNG) I also used for it this blog.\nEdit: replaced with better SVG generator\n","permalink":"https://anantcode.github.io/posts/7-free-favicon-generator-from-text/","summary":"redketchup.io has a free favicon generator(only generates PNG) I also used for it this blog.\nEdit: replaced with better SVG generator","title":"Free Favicon Generator From Text"},{"content":"Greatly simplifies working with images in md file in VSCode, and IMO one of the best ways to create blog post md in VSCode\nWhen working on a blog post that is written in .md, adding an image in the .md file can be tedious.\nYou can point to an image by its URL:\n![alt-text](\u0026lt;url-of-image\u0026gt;) Alternatively you can place the image locally in static folder in hugo project root, as described in How to add image to a Hugo blogpost\nAs a improvement in the above workflow, following can be used additionally to automate storing of image in appropriate directory (project-root/static/\u0026lt;dir-of-post\u0026gt;/img1.png) and using its reference in the blog post md, i.e.:\n![alt-text](/\u0026lt;dir-of-post\u0026gt;/img1.png) Setup  Install the VSCode plugin Paste Image  Overview of features from official documentation: Use following configs:  Update these configs in your workspace settings.json file in VSCode (press F1 and search for Open Workspace Settings (JSON))\n \u0026#34;pasteImage.path\u0026#34;: \u0026#34;${projectRoot}/static/${currentFileNameWithoutExt}\u0026#34;,\r\u0026#34;pasteImage.basePath\u0026#34;: \u0026#34;${projectRoot}/static\u0026#34;,\r\u0026#34;pasteImage.prefix\u0026#34;: \u0026#34;/\u0026#34;,\r\u0026#34;pasteImage.namePrefix\u0026#34;: \u0026#34;${currentFileNameWithoutExt}_\u0026#34;, Now we are ready to start pasting images from clipboard in MD files.\nUsage   Use Greenshot or any snip software to copy a sample screenshot (example Shift + Win + S on Windows). We will paste this in the md file.\n  Paste in md file in VSCode using Ctrl + Alt + V\n  What this does  Creates a folder with name of your post article in /static folder. This new folder will be used by the plugin to store any subsequent images that you paste when working on this md file. Creates an image file for the pasted image under the folder. Adds the relevant image link to the created image file in md file with correct relative path /\u0026lt;folder-for-article\u0026gt;/\u0026lt;image-file.png\u0026gt;  ","permalink":"https://anantcode.github.io/posts/6-simple-add-image-in-markdown-vscode-plugin/","summary":"Greatly simplifies working with images in md file in VSCode, and IMO one of the best ways to create blog post md in VSCode\nWhen working on a blog post that is written in .md, adding an image in the .md file can be tedious.\nYou can point to an image by its URL:\n![alt-text](\u0026lt;url-of-image\u0026gt;) Alternatively you can place the image locally in static folder in hugo project root, as described in How to add image to a Hugo blogpost","title":"Best way to add image in markdown file in VSCode - using VSCode plugin 'Paste Image'"},{"content":"YML is a document (plain text file) that is used generally as configuration file, just like json file would be used. It is meant to be more human readable and have minimal syntax. Refer this Quickstart guide on YML.\nYou can write strings without \u0026quot; \u0026quot; and I wanted to write a multiline string, but faced a problem.\nI tried this SO, first problem I faced is - in yml corrent indentation is important else you get errors like:\nfailed to unmarshal YAML: yaml: line 79: could not find expected \u0026#39;:\u0026#39; Corrected the indentation.\nAnyway didnt work for me because of the Theme I am using(PaperMod Hugo). But I learnt how to write multiline string in yml, atleast.\nReferences: this SO\n Edit: Found a way to make it work later:\n Content: | - Line 1 - - Line 2 / Para 2 with multiple Sentences. - - Line 3 ","permalink":"https://anantcode.github.io/posts/4-write-multiline-text-in-yml-file/","summary":"YML is a document (plain text file) that is used generally as configuration file, just like json file would be used. It is meant to be more human readable and have minimal syntax. Refer this Quickstart guide on YML.\nYou can write strings without \u0026quot; \u0026quot; and I wanted to write a multiline string, but faced a problem.\nI tried this SO, first problem I faced is - in yml corrent indentation is important else you get errors like:","title":"How to Write Multiline Text in YML File"},{"content":"Method 1 hugo new posts/\u0026lt;name-of-post-file.md\u0026gt; Method 2 Directly create a MD file under content/posts and add frontmatter manually / copy from a existing md file.\nMethod 3 Learnt from a hugo theme(PaperMod) documentation here\nCreate new post md file based on a archetype.\nBefore doing this, add the archetype md file at archetypes/post.md\nhugo new --kind post \u0026lt;name\u0026gt; # name must have .md or\nhugo new -k post \u0026lt;name\u0026gt; # use -k instead of --kind But above creates new md file directly in content whereas I want it in content/posts/ (I could not see md files appear as posts in this theme until the md files are in content/posts/). Its not a problem because I can easily change this by:\nhugo new -k post posts/test4.md Also check bash script to create post in Hugo based on this archetype approach.\nand now new md files are added in content/posts/ and will be based on the archetype you set.\nAlso check: Automatically set current datetime in new post.\n","permalink":"https://anantcode.github.io/ways-to-create-new-hugo-post/","summary":"Method 1 hugo new posts/\u0026lt;name-of-post-file.md\u0026gt; Method 2 Directly create a MD file under content/posts and add frontmatter manually / copy from a existing md file.\nMethod 3 Learnt from a hugo theme(PaperMod) documentation here\nCreate new post md file based on a archetype.\nBefore doing this, add the archetype md file at archetypes/post.md\nhugo new --kind post \u0026lt;name\u0026gt; # name must have .md or\nhugo new -k post \u0026lt;name\u0026gt; # use -k instead of --kind But above creates new md file directly in content whereas I want it in content/posts/ (I could not see md files appear as posts in this theme until the md files are in content/posts/).","title":"How to create a new Post in a Hugo blog"},{"content":"Adding image in body of your post in Markdown in Hugo.\nYou can add the image file say image.png to static folder, and then reference it in your md file which is at content/posts/ just like following:\n![alt-text](/image.png) Reference: page\nAlso see: Add image in markdown file in VSCode using plugin Paste Image\n","permalink":"https://anantcode.github.io/posts/3-add-image-in-hugo-markdown/","summary":"Adding image in body of your post in Markdown in Hugo.\nYou can add the image file say image.png to static folder, and then reference it in your md file which is at content/posts/ just like following:\n![alt-text](/image.png) Reference: page\nAlso see: Add image in markdown file in VSCode using plugin Paste Image","title":"How to add image to a Hugo blogpost"},{"content":"Hugo is one of the most popular open-source static site generators. Static sites can be created with Markdown files using Hugo.\nThis article outlines the steps to generate a blog(static site) using Hugo and hosting it on GitHub.\nInstalling Hugo Hugo is available as an executable binary for all platforms, so no \u0026lsquo;installation\u0026rsquo; is required as such. Just download and add its location to your Path to access it from anywhere in your terminal.\nCreating new site with Hugo After installing Hugo,\nhugo new site \u0026lt;name-of-site\u0026gt; Choose a Hugo theme Choose a theme (say PaperMod) from Hugo Themes\nClone the theme\u0026rsquo;s git repo in themes dir in your new site dir.\nconfig.toml / config.yml Edit config.toml:\n set the theme set the title set baseURL \u0026lsquo;https://\u0026hellip;.\u0026rsquo; (e.g. if you want to publish to github, you would use \u0026lt;your-git-username\u0026gt;.github.io)  You may see different themes use different conventions, like some use config.yml instead of toml etc. Best practice is to follow the documentation of the particular theme you are using.\nStart the local server hugo server starts server locally and it refreshes on every change, while you develop.\n Create a new Post hugo new posts/mypost.md This will create a new md file under content/posts/ Open the file and you can delete draft or set it to false.\nYou can now start editing this md file and write your blog post!\nCreate 2 GitHub repos   1st repo - to store the code (does not store the static site)\n  2nd repo(static site repo) - to store the static site.\n  2nd must have atleast 1 commit and should have main branch (commit it from somewhere + push to main, so remote has them, or use inbuilt github when it asked \u0026ldquo;initialize with readme?\u0026rdquo;)\nAdd a git submodule The submodule will refer to 2nd repo and will exist at the folder public that is inside 1st repo.\ngit submodule add -b main \u0026lt;url of 2nd\u0026gt; public`  Notice the folder for submodule is specified and is named public here.\n  giving public failed and had to cd into public because public got created when I ran hugo server For similiar case later, I just deleted the public folder, and retried submodule add.\n  also the 1st (your blog-code-repo) should be a git repo already, then adding the submodule would work. So better make your hugo-project a git repo first.\n This will create a public folder and populate it with 2nd repo.\nAdding 2nd repo as submodule makes it possible to directly push generated stuff in 2nd repo (that will effectively deploy the site on GutHub pages)\n Build the code hugo -t \u0026lt;name of theme\u0026gt;` example hugo -t PaperMod creates static content (say 10 pages, one sitemap etc\u0026hellip;) in public dir.\n btw if you just check where the origin is pointing to when you are inside the public folder - it will point to the 2nd repo - because you are inside public folder that you created using submodule.\ngit remote -v Deploy site to GitHub Now, cd into the public folder, see the files generated by Hugo, and push them to origin (2nd repo)\ncd public\rgit push origin main Enable Github Pages in your 2nd repo, and see the site live!\nCongrats! you now have a live static-site created using Hugo.\n Thanks to adityatelange for the theme PaperMod that is also used to create this blog.\n","permalink":"https://anantcode.github.io/posts/create-blog-with-hugo/","summary":"Hugo is one of the most popular open-source static site generators. Static sites can be created with Markdown files using Hugo.\nThis article outlines the steps to generate a blog(static site) using Hugo and hosting it on GitHub.\nInstalling Hugo Hugo is available as an executable binary for all platforms, so no \u0026lsquo;installation\u0026rsquo; is required as such. Just download and add its location to your Path to access it from anywhere in your terminal.","title":"Create Blog With Hugo"},{"content":"This is in continuation to Part 1 \nWhat is great about the way we did this (using Next.js) is - we can now export this as a static website. The static website can be deployed anywhere now!\nUpdate build script - use next export Notice in package.json, there is a command called build. This is build script.\nnpm run build npm run build will build for production, but there is one more command called next export that will export you site as a static website.\nWe can add it to the build script in package.json\n\u0026#34;build\u0026#34;: \u0026#34;next build \u0026amp;\u0026amp; next export\u0026#34; Save package.json\nCut off the server (That you may have started. It is started using npm run dev. If already running, stop it) . (Close by Ctrl + C etc.)\nTime to build npm run build This will create a folder on root called out that will have the static site.\nGot some warnings and errors:  Do not use   Do not use \u0026lt;img\u0026gt; . Instead use Image from next/image - this is what the next build process tells in error. However, it is not mandatory and can be overridden like below: (infact I got it as a warning in latest Next.js version 12.1.4 , not as a Error ;)\nMy Warning:\n Error: Missing \u0026ldquo;key\u0026rdquo; prop for element in iterator  In the home page, list of Posts - each post should have a key (and unique key) We can easily add it as the index of array item.\nAfter fixing all errors, (like class was used instead of className)\nFinally running again npm run build and success!\nExport successful. Files written to ___________\\out Now you can test (serve this static site locally) Use for e.g. a package called serve\nInstall it globally\nnpm i -g serve now run\nserve -s ./out -p 8000 But got this error on my Windows machine:\nAbout this error:\n.ps1 cannot be loaded because the execution of scripts is disabled on this system\nbased on this answer\nWorked!\nOpening the static site at localhost:8000\nIts working!\nIts a static website you can deploy it anywhere!\nDone testing.\nDeploy! I am going to deploy to Vercel.\n Vercel is great for any nextjs website - static, whether it uses API routes, anything   Create an account on Vercel Create a new github repo (I already had) Deploy from the github repo to Vercel - its fairly straightforward.  ","permalink":"https://anantcode.github.io/posts/publishing-nextjs-site-blog/","summary":"This is in continuation to Part 1 \nWhat is great about the way we did this (using Next.js) is - we can now export this as a static website. The static website can be deployed anywhere now!\nUpdate build script - use next export Notice in package.json, there is a command called build. This is build script.\nnpm run build npm run build will build for production, but there is one more command called next export that will export you site as a static website.","title":"Creating a Blog with Next.js and Markdown - Part 2"},{"content":"Special mention to Traversy Media for content that is referenced here.\nNext.js Setup and Styling $ npx create-next-app blog npm i marked gray-matter To run (opens default app): npm run dev ready - started server on 0.0.0.0:3000, url: http://localhost:3000 wait - compiling... event - compiled client and server successfully in 9s (125 modules) Deleting the unwanted:  Not using api routes, so delete pages/api folder   index.js is home page Each page in Next.js is a functional component, example:  Home here is a functional component of react.\nAnytime you create a component in pages folder like say about.js , that will allow us to go to /about and that component will get automatically rendered - easy routing due to Next.js\nRemove some unwanted boilerplate Keep Head import because we need the title of page.\nDelete this class because we will have a single global CSS file.\nGet rid of main tag and footer tag\nChange \u0026lt;title\u0026gt; etc.\nFinal is very basic:\nAdd a global css Get global.css from here and add it to styles/\nCreate a components folder for components that are not pages, like Header etc.\n Tip: Use ES7 react redux extension for VSCode - do _rfc and it will give you a function component.\n Use rfc to create a basic react functional component\nAdd a div with className “container”\n Tip: Enable Emmet for .js files:\n  Nothing’s going to show up now, because we have not added it yet.\nNow go to _app.js and import Header\nand add the Header in _app.js\nAdd a \u0026lt;main\u0026gt; tag with “container” class, and move the Component into the main tag\nCreate a Markdown File index.js (HOME PAGE) is where we want to use a data fetching method - to fetch our Markdown posts.\nThe markdown posts are going to go in root in a folder called posts, so lets create that.\nCreate a folder called posts on root. Create a folder images in public also create public/images/posts to store images of your post.\nCreate a frontmatter - it is always at the top In the test md file,\nGet post on homepage from md: getStaticProps() allows us to fetch data at build time - we can use this to create static website - use this to fetch data for static website.\nIn index.js\nexport async function getStaticProps() {  // here data can even come from strapi etc.(any headless CMS)  return {  props: { posts: \u0026#34;The Posts\u0026#34; }, //test  }; } getStaticProps() makes it available in the main component: (here in Home functional component)\nImport fs Although as soon as you add the import\nimport fs from \u0026#34;fs\u0026#34;; You will see error by Next\nReason for the error is - fs is not something you can import on the client side. fs is the filesystem node.js module and we are trying to import it in client side code (react code).\nHowever next.js is smart enough to know that if you use the fs module inside the getStaticProps() which will run on Server Side, then fs will work.\nNo more errors! :) Even if import fs from \u0026quot;fs\u0026quot; is still in code, fs was used only inside getStaticProps() function and hence the error is no longer shown by Next.\n1 = array of all files (names?) on posts directory.\n2 = 3, they are same.\n Create an array that will contain all the slugs. ~15:00 mins in https://youtu.be/MrjeefD8sac?t=895\n(For now there is only 1 test.md - its slug)\nUse gray-matter import matter from \u0026#34;gray-matter\u0026#34;; in getStaticProps()\n// destructring - renaming the data to frontmatter. const { data: **frontmatter** } = matter(markdownWithMeta);  return {  slug,  **frontmatter**, }; Now return the posts instead of test string, from getStaticProps()\nreturn {  props: { posts: posts }, }; we are logging it in component start\nSo for log at line 7, we see:\nwhy array? because its result of map()\nAlso array size = no. of files. We have only 1 test.md :\n Notice that we dont have the body of markdown - we dont need it because we will not put it in index.js but will do in another component.\n Add some more .md files see them getting displayed.\nCreate a component for post, instead of the h3 Added links to Post component\nIt is redirecting to the URL (but getting 404 ofcourse, we dont have those pages yet).\nNeed to work on inner page now. We wants url of the blog page to be like /blog/slug\nSince this is a static site, we need to create these paths at build time obviously. They way we will do that with specific data fetching method called getStaticPaths\nWe wants url of the blog page to be like /blog/slug and slug can be anything. So we have to format the pages like following, for routing:\nSo starting:\n Create a new folder blog under pages/ Create a js file under blog [slug].js It is named with because we want to be dynamic. Create react component in the js file - call it PostPage  export default function PostPage() {  return \u0026lt;div\u0026gt;post\u0026lt;/div\u0026gt;; }   We also want to do a couple of things\n Obviously Fetch the data from the markdown files, for the PostPage Statically generate these paths (because this is going to be a static website - and it needs to know paths beforehand, and we need to do that based on the data)  Write 2 functions - getStaticPath and getStaticProps\n  import fs from \u0026#34;fs\u0026#34;; import path from \u0026#34;path\u0026#34;;  export default function PostPage() {  return \u0026lt;div\u0026gt;post\u0026lt;/div\u0026gt;; }  export async function getStaticPaths() {  const files = fs.readdirSync(path.join(\u0026#34;posts\u0026#34;));  const paths = files.map((filename) =\u0026gt; ({  params: {  slug: filename.replace(\u0026#34;.md\u0026#34;, \u0026#34;\u0026#34;),  },  }));   console.log(paths);   return {  paths, // paths will be like [{params: {slug: 1}}]  fallback: false, //if doesnt find a page, for 404  }; }  //its incomplete now export async function getStaticProps() {  return {  props: {},  }; } paths logged just before return is\nSince we are returning paths (it has the slugs we needed) from getStaticPaths we can access that in the other function getStaticProps export async function getStaticProps({ params: { slug } }) {  console.log(slug);  return {  props: {},  }; } We are able to see the log : (when page 3 was refreshed/loaded) :\nSo we now have direct access to whatever is the slug is, inside getStaticProps\nNow work on content To see what exactly is frontmatter, JSON.stringify (we have see in past for the list page)\n Btw \u0026lt;\u0026gt; \u0026lt;/\u0026gt; is called an empty fragment\n We add a button on the PostPage to go to home:\nWe construct the actual page content, using the CSS classes present in the global.css:\nimport fs from \u0026#34;fs\u0026#34;; import path from \u0026#34;path\u0026#34;; import matter from \u0026#34;gray-matter\u0026#34;; import Link from \u0026#34;next/link\u0026#34;; import { marked } from \u0026#34;marked\u0026#34;;  export default function PostPage({  frontmatter: { title, date, cover_image },  slug,  content, }) {  return (  \u0026lt;\u0026gt;  \u0026lt;Link href=\u0026#34;/\u0026#34;\u0026gt;  \u0026lt;a className=\u0026#34;btn btn-back\u0026#34;\u0026gt;Go Back\u0026lt;/a\u0026gt;  \u0026lt;/Link\u0026gt;  \u0026lt;div className=\u0026#34;card card-page\u0026#34;\u0026gt;  \u0026lt;h1 className=\u0026#34;post-title\u0026#34;\u0026gt;{title}\u0026lt;/h1\u0026gt;  \u0026lt;div className=\u0026#34;postdate\u0026#34;\u0026gt;Posted on {date}\u0026lt;/div\u0026gt;  \u0026lt;img src={cover_image} alt=\u0026#34;post-image\u0026#34; /\u0026gt;  \u0026lt;div className=\u0026#34;post-body\u0026#34;\u0026gt;  {/* will use marked here - will insert the MD HTML here Basicall inserting HTML - when we do that within JSX we have to use an attribute called dangerouslySetInnerHTML. It is set with double curly braces, like {{__html: }}*/}  \u0026lt;div dangerouslySetInnerHTML={{ __html: marked(content) }}\u0026gt;\u0026lt;/div\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;/\u0026gt;  ); } Notice the use of attrib: dangerouslySetInnerHTML\nWe set it with {{ }} and __html as the key.\nWe notice the dates of posts on the homepage may not be sorted.\nSort it in index.js\nimport a utility function sortByDate to help with sorting\nWe are done with basic blog site creation, now deployment!\nContinued in Part 2\n","permalink":"https://anantcode.github.io/posts/2-create-blog-with-nextjs-markdown/","summary":"Special mention to Traversy Media for content that is referenced here.\nNext.js Setup and Styling $ npx create-next-app blog npm i marked gray-matter To run (opens default app): npm run dev ready - started server on 0.0.0.0:3000, url: http://localhost:3000 wait - compiling... event - compiled client and server successfully in 9s (125 modules) Deleting the unwanted:  Not using api routes, so delete pages/api folder   index.js is home page Each page in Next.","title":"Creating a Blog with Next.js and Markdown - Part 1"},{"content":"Emmet is a popular plugin available for multiple IDEs including VSCode.\nBy Default it works when you are on .html file.\nYou can also make it work on .js files when working with JSX.\nOpen Settings in VSCode: Ctrl + , Navigate to Workspace tab \u0026gt; Extensions Use “Edit in settings.json\u0026quot; Add following config to the settings.json file: {  \u0026#34;emmet.includeLanguages\u0026#34;: {  \u0026#34;javascript\u0026#34;: \u0026#34;javascriptreact\u0026#34;  } } Emmet should start working in .js files now.  Thanks to Eshwaren M\n","permalink":"https://anantcode.github.io/posts/enable-emmet-in-jsx-for-vscode/","summary":"Emmet is a popular plugin available for multiple IDEs including VSCode.\nBy Default it works when you are on .html file.\nYou can also make it work on .js files when working with JSX.\nOpen Settings in VSCode: Ctrl + , Navigate to Workspace tab \u0026gt; Extensions Use “Edit in settings.json\u0026quot; Add following config to the settings.json file: {  \u0026#34;emmet.includeLanguages\u0026#34;: {  \u0026#34;javascript\u0026#34;: \u0026#34;javascriptreact\u0026#34;  } } Emmet should start working in .","title":"Enable Emmet for JSX in VSCode"},{"content":"Programming Blog can be one of the best first projects for any programmer.\nBenefits  Document your entire journey and learning experience. Keeps you accountable for learning. Gives a level of professionalism.  Following the tips/suggestions available online for your programming blog Wordpress or from scratch (HTML CSS, JAMstack)? It is a personal choice, and based on what you are looking out of it when you spend your time creating a blog, you have the freedom to choose your platform/tech stack.\n Reaching larger audience - use platforms like Medium, dev.to, hashnode. Documenting your progress - anything is fine.  My Motivation  Wanted to have a programming blog/website of my own for a long time. Wanted to do 100 days of code. This short was a recent trigger.  My research before starting  What tools/platform Any other things to keep in mind. YouTubed it - found some suggestions of using platforms like Medium or Hashnode for blogging.   Common tips I came across Use a Template Use free templates, if you are not a designer.\nHost on free services  Netlify Amazon S3 GitHub  Use a static site generator  Gatsby Hugo Jekyll Next.js   What to write  Doesn\u0026rsquo;t have to be essay. Can be small tips tricks that I learn, on new tech maybe. Helps you remember and revisit what you learnt.  All Set! I decided to create a Next.js and Markdown based blog, because I really like Markdown and Next.js and wanted some hands-on with Next.js. More details in upcoming posts.\n Update: This blog was originally written in Markdown and published later on the now Live blog!\n ","permalink":"https://anantcode.github.io/posts/1-why-should-you-blog/","summary":"Programming Blog can be one of the best first projects for any programmer.\nBenefits  Document your entire journey and learning experience. Keeps you accountable for learning. Gives a level of professionalism.  Following the tips/suggestions available online for your programming blog Wordpress or from scratch (HTML CSS, JAMstack)? It is a personal choice, and based on what you are looking out of it when you spend your time creating a blog, you have the freedom to choose your platform/tech stack.","title":"Why should you start a blog"},{"content":"Server Side Rendering(SSR) and Client Side Rendering are two different ways in which a website is served to a client.\nSSR and CSR both have their own advantages and disadvantges.\nWhich one would you prefer for better SEO (e.g. blog, ecommerce etc), and what are the quirks of search engines that affects your page ranking?\n This whole debate has JS at the center - if there is no JavaScript in picture(hardly possible in modern websites and apps) and there is plain old HTML and CSS, then there is no CSR and SSR - its a static site!\n What is CSR  The site (HTML, CSS, JS) will reach to client in minimal HTML(usually a single page served from e.g. a CDN) then the JS does most of the actual HTML generation(creating DOM) and then the HTML starts to exist on client. All other pages are also rendered by the JS by modifying DOM in the same page(hence Single Page Application)  Client-side rendering means that a website’s JavaScript is rendered in your browser, rather than on the website’s server.\nWhat are the benefits of client-side rendering?  As all the burden of rendering content is on the client (i.e. person or bot trying to view your page), Client-side rendering is the cheaper option for the website owner because it reduces the load on their own servers.  What are the risks of client-side rendering?   Client-side rendering can in general increase chances of a poor user experience. It is because JS can add seconds of load time to a page, and if that burden is fully on the client (website visitor), then they could get frustrated and leave your site.\n  CSR\u0026rsquo;s effect on search engine bots: For example, Googlebot has something called a second wave of indexing. In this process, they crawl and index the HTML of a page first, then come back to render the JavaScript when resources become available. This two-phased approach means that sometimes, JavaScript content might be missed, and not included in Google’s index (see “What is render budget?” for more information). Other search engines are worse at rendering JavaScript than Google.\n  JavaScript can also slow search engine bots down while they’re crawling a website, which on large sites, can introduce crawl budget issues.\nWhat is SSR  The site will be ready with the final intended HTML (all rendered) when it reaches over internet from server to client. Any JS that has to run, executes on Server and HTML is created.  Frameworks like Next.js and Nuxt.js provide SSR capabilities.\nWhat are the benefits of server-side rendering? Because JavaScript is rendered on the website’s server, both\n search engine bots, and humans get a faster page experience.  This not only means a better UX (which is also part of Google’s ranking algorithm), but it also eliminates speed-related crawl budget issues.\nSending fully-rendered pages to search engine bots also means that you’re not risking the “partial indexing” that can happen with client-side rendered content. When Google and other search engine bots try to access your page, instead of having to wait for rendering resources to become available before seeing your full page, they’ll get the fully-rendered page right from the get-go.\nWhat are the risks of server-side rendering?  Server-side rendering can be expensive and resource-intensive.  Expensive: because the full burden of rendering your content for bots and human website visitors is on your servers. Resource-intensive to implement: since it’s not the default for JavaScript websites and will require work from your engineering team to execute.    Server-side rendering also tends not to work with third-party JavaScript. So, if you use services like Bazaarvoice to pull in reviews on your website, they won’t be rendered with server-side rendering.\nWhy SSR is better for SEO  bots get full HTML when crawling. UX is better - its one of the params for better ranking.  Third approach - Dynamic Rendering  SSR for search engine bots, CSR in all other cases.\n  Send a fully rendered page to search engine bot when it tries to access the page. When a human tries to access the same page, their browser has to render the page.   References:\n https://www.botify.com/blog/client-side-server-side-rendering-seo#:~:text=Between%20the%20two%20options%2C%20server,better%20in%20Google%20search%20results.  ","permalink":"https://anantcode.github.io/posts/diff-bw-csr-and-ssr/","summary":"Server Side Rendering(SSR) and Client Side Rendering are two different ways in which a website is served to a client.\nSSR and CSR both have their own advantages and disadvantges.\nWhich one would you prefer for better SEO (e.g. blog, ecommerce etc), and what are the quirks of search engines that affects your page ranking?\n This whole debate has JS at the center - if there is no JavaScript in picture(hardly possible in modern websites and apps) and there is plain old HTML and CSS, then there is no CSR and SSR - its a static site!","title":"Server Side Rendering(SSR) vs Client Side Rendering - for SEO"}]