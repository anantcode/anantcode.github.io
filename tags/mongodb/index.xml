<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mongoDB on Anant Code</title>
    <link>https://anantcode.github.io/tags/mongodb/</link>
    <description>Recent content in mongoDB on Anant Code</description>
    <image>
      <url>https://anantcode.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://anantcode.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 May 2022 21:03:37 +0530</lastBuildDate><atom:link href="https://anantcode.github.io/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to MongoDB</title>
      <link>https://anantcode.github.io/posts/2022-05-16-mongodb/</link>
      <pubDate>Mon, 16 May 2022 21:03:37 +0530</pubDate>
      
      <guid>https://anantcode.github.io/posts/2022-05-16-mongodb/</guid>
      <description>Intro to mongodb</description>
    </item>
    
    <item>
      <title>Day8 #100DaysOfCode</title>
      <link>https://anantcode.github.io/posts/2022-05-14-day8-100doc/</link>
      <pubDate>Sat, 14 May 2022 12:31:18 +0530</pubDate>
      
      <guid>https://anantcode.github.io/posts/2022-05-14-day8-100doc/</guid>
      <description>Now extend the fetching from MongoDB to
Individual page (dynamic page) of next. On the same dynamic page, the URLs also we will get from the DB (GSPa) Both of these to be done in dynamic page [ ]
fetching URLs for GSPa export async function getStaticPaths() { const uri = `mongodb+srv://${secret.user}:${secret.pass}@cluster0.xf7jy.mongodb.net/myFirstDB?retryWrites=true&amp;amp;w=majority`; const client = await MongoClient.connect(uri); const db = client.db(); const notesCollection = db.collection(&amp;#34;notesColl2&amp;#34;); const notesIds = await notesCollection.find({}, { _id: 1 }).</description>
    </item>
    
    <item>
      <title>Day7 #100DaysOfCode</title>
      <link>https://anantcode.github.io/posts/2022-05-14-day7-100doc/</link>
      <pubDate>Sat, 14 May 2022 12:30:58 +0530</pubDate>
      
      <guid>https://anantcode.github.io/posts/2022-05-14-day7-100doc/</guid>
      <description>In last post
MongoDB was set up - able to store data from a form. Redirecting to homepage after successful form submit. Use useRouter to do it:
In pages/new-note/index.js import { useRouter } from &amp;#39;next/router&amp;#39; .. const router = useRouter(); // as usual, hook should be called first in react functional component //after successful response of submit router.replace(&amp;#34;/&amp;#34;); // or push() Getting data from mongoDB We could do it like, in page component GSP write a connection to our API route &amp;gt; that API route connects to mongoDB i.</description>
    </item>
    
    <item>
      <title>Day6 #100DaysOfCode</title>
      <link>https://anantcode.github.io/posts/2022-05-11-day6-100doc/</link>
      <pubDate>Wed, 11 May 2022 08:20:38 +0530</pubDate>
      
      <guid>https://anantcode.github.io/posts/2022-05-11-day6-100doc/</guid>
      <description>Day 6 Using mongoDB in the nextjs app.
So far covered:
getStaticProps, and getStaticPaths and getServerSideProps They allow us to fetch data for pre-rendering those pages, So that we pre-render the pages with the data, instead of without the data they might need. Upto this point, we&amp;rsquo;re only working with dummy data though (not actually fetching from anywhere) - it is actually hard-coded data
We do have this Add New Meetup page here, which would allow users to enter data for a new meetup.</description>
    </item>
    
  </channel>
</rss>
